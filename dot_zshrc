eval "$(/opt/homebrew/bin/brew shellenv)"
eval "$(starship init zsh)"
eval "$(sheldon source)"
eval "$(rbenv init - --no-rehash zsh)"
eval "$(pyenv init - zsh)"

# Zsh

fpath=(path/to/zsh-completions/src $fpath)
autoload -Uz compinit && compinit

source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# nvm

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# alias

alias cat='bat'
alias g='git'
alias hex='hexyl'
alias ll='eza --icons -lah'
alias llt='eza --icons -lah -T -L2'
alias ls='eza --icons'
alias relogin='exec $SHELL -l'
alias dataconnect='curl -sL https://firebase.tools/dataconnect | bash'

# fzf

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--height=80%"

gswt() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git switch $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

gpls() {
  local pr_number
  pr_number='echo {} | xargs | cut -f 1 -d " "'
  view_pr_web="$pr_number | xargs gh pr view"

  gh pr list |
    fzf --no-multi --ansi \
      --preview "$pr_number | xargs gh pr view" \
      --bind "alt-s:execute($pr_number | xargs gh pr checkout)+abort" \
      --bind "enter:execute($pr_number | xargs gh pr view --web)"
}

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

glog() {
	glNoGraph |
		fzf --no-sort --reverse --tiebreak=index --no-multi \
			--ansi --preview="$_viewGitLogLine" \
			--header "enter to view, alt-y to copy hash" \
			--bind "enter:execute:$_viewGitLogLine   | less -R" \
			--bind "alt-y:execute:$_gitLogLineToHash | pbcopy"
}

gst() {
	local diff="echo {} | xargs | cut -f 2 -d ' ' | xargs -I % sh -c 'git diff % | diff-so-fancy'" &&
	git status -s |
		fzf --no-sort --tiebreak=index --no-multi --ansi --preview="$diff" \
		--header "enter to view" \
		--bind "enter:execute:$diff | less -R"
}

grb() {
	local commits commit
	commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
	commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
	git rebase -i $(echo "$commit" | awk '{print $1}')
}

gad() {
  local diff
  diff='echo {} | xargs | cut -f 2 -d " " | xargs -I % sh -c "git diff % | diff-so-fancy"'

  git diff --name-status |
    awk '{print $2}' |
    fzf -m --no-sort --ansi \
    --preview="$diff" | \
    xargs git add
}

gw() {
  local worktree_base_dir="$(git rev-parse --git-common-dir)/worktree"
  local worktrees=$(git worktree list)
  local worktree_branches=$(echo "$worktrees" | sed 's/.*\[\(.*\)\].*/\1/')

  local remote_branches=$(git branch -r --format='remotes/%(refname:short)' | grep -v 'HEAD')

  local all_branches=$(
    echo "$worktree_branches"
    echo "$remote_branches"
  )

  local preview="git log --oneline -15 $(echo {} | sed 's/remotes\///')"

  local delete="
    worktree_info=\$(git worktree list | grep '\[{}\]')
    if [[ -n \"\$worktree_info\" ]]; then
      dir=\$(echo \"\$worktree_info\" | awk '{print \$1}')
      rm -rf \"\$dir\" && git worktree prune && git branch -D {}
    fi
  "

  local reload="
    worktree_branches=\$(git worktree list | sed 's/.*\[\(.*\)\].*/\1/')
    remote_br=\$(git branch -r --format='remotes/%(refname:short)' | grep -v 'HEAD')
    (echo \"\$worktree_branches\"; echo \"\$remote_br\") | grep -v '^$'
  "

  local create_new="echo -n 'Enter branch name: ' > /dev/tty && \
    read branch_name && \
    worktree_dir=\"$worktree_base_dir/\$branch_name\" && \
    mkdir -p \$(dirname \"\$worktree_dir\") && \
    git worktree add -b \$branch_name \"\$worktree_dir\" > /dev/null && \
    echo \"Created branch \$branch_name in directory \$worktree_dir\" > /dev/tty"

  local selected=$(echo "$all_branches" | grep -v '^$' | fzf --preview="$preview" --prompt="Select branch: " \
    --bind="ctrl-d:execute-silent($delete)+reload($reload)" \
    --bind="ctrl-n:become($create_new)")
  
  [[ -z "$selected" ]] && return 0

  if [[ "$selected" == remotes/origin/* ]]; then
    local local_branch_name=$(echo "$selected" | sed 's|remotes/origin/||')
    local worktree_dir="$worktree_base_dir/$local_branch_name"

    mkdir -p "$(dirname "$worktree_dir")"
    git worktree add -b "$local_branch_name" "$worktree_dir" "$selected" > /dev/null
    cd "$worktree_dir" && echo "Created branch '$local_branch_name' from '$selected' in directory '$worktree_dir'"

  else
    local dir=$(echo "$worktrees" | grep "\[$selected\]" | awk '{print $1}')
    cd "$dir" && echo "Switched to branch '$selected' in directory '$dir'"
  fi
}

# ghq

fzf-github-src() {
  local selected_dir=$(ghq list -p | fzf)
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N fzf-github-src
bindkey '^G' fzf-github-src

# snippet

show_snippets() {
  local snippets=$(cat ~/zsh_snippet | fzf | cut -d ':' -f 2-)
  LBUFFER="${LBUFFER}${snippets}"
  zle reset-prompt
}
zle -N show_snippets
bindkey '^o' show_snippets
